@page "/signup"
@using BlogApplication.Services
@using System.ComponentModel.DataAnnotations
@using MudBlazor
@inject SupabaseService SupabaseService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<div class="signup-page">
    <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: calc(100vh - 104px);">
        <MudPaper Elevation="3" Class="pa-8 rounded-xl position-relative overflow-hidden" Style="width: 100%; max-width: 450px;">
            <!-- Decorative elements -->
            <div class="position-absolute signup-circle-1"></div>
            <div class="position-absolute signup-circle-2"></div>
            
            <div class="text-center mb-8">
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Color="Color.Secondary" Size="Size.Large" Class="mb-3 signup-icon-float" />
                <MudText Typo="Typo.h4" Class="mt-3 fw-bold">Join Our Creative Community</MudText>
                <MudText Typo="Typo.body1" Class="mt-2 mb-2 signup-subtitle">Start your journey to share ideas, connect with others, and make your voice heard</MudText>
            </div>
            
            <MudGrid Spacing="3">
                <MudItem xs="12">
                    <div class="d-flex align-center mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Class="mr-2" Color="Color.Primary" />
                        <MudTextField T="string"
                                    @bind-Value="username"
                                    Label="Username"
                                    Required="true"
                                    RequiredError="Username is required!"
                                    Variant="Variant.Outlined"
                                    FullWidth="true" />
                    </div>
                </MudItem>

                <MudItem xs="12">
                    <div class="d-flex align-center mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.Email" Class="mr-2" Color="Color.Primary" />
                        <MudTextField @bind-Value="email"
                                    Label="Email"
                                    Required="true"
                                    Variant="Variant.Outlined"
                                    Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email address" })"
                                    InputType="InputType.Email"
                                    FullWidth="true" />
                    </div>
                </MudItem>

                <MudItem xs="12">
                    <div class="d-flex align-center mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.Lock" Class="mr-2" Color="Color.Primary" />
                        <MudTextField @bind-Value="password"
                                    Label="Password"
                                    Required="true"
                                    InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                    Adornment="Adornment.End"
                                    Variant="Variant.Outlined"
                                    FullWidth="true"
                                    AdornmentIcon="@(showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                    AdornmentColor="Color.Primary"
                                    OnAdornmentClick="() => showPassword = !showPassword" />
                    </div>
                </MudItem>

                <MudItem xs="12">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.LockReset" Class="mr-2" Color="Color.Primary" />
                        <MudTextField @bind-Value="confirmPassword"
                                    Label="Confirm Password"
                                    Required="true"
                                    InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
                                    Adornment="Adornment.End"
                                    Variant="Variant.Outlined"
                                    FullWidth="true"
                                    AdornmentIcon="@(showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                    AdornmentColor="Color.Primary"
                                    OnAdornmentClick="() => showConfirmPassword = !showConfirmPassword" />
                    </div>
                </MudItem>
            </MudGrid>

            <MudCardActions Class="d-flex flex-column align-center pb-6 px-4">
                <MudButton Variant="Variant.Filled"
                         Color="Color.Primary"
                         Size="Size.Large"
                         FullWidth="true"
                         OnClick="HandleSignUp"
                         Disabled="isLoading"
                         Class="signup-button mb-3 py-2">
                    @if (!isLoading)
                    {
                        <span>Sign Up</span>
                    }
                    else
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <span>Signing Up...</span>
                    }
                </MudButton>
                <div class="d-flex justify-center mt-6">
                    <MudText Typo="Typo.body2" Class="signup-alternate-option">
                        Already have an account? <MudLink Href="/signin" Underline="Underline.None" Class="ml-1 fw-bold">Sign in</MudLink>
                    </MudText>
                </div>
            </MudCardActions>
        </MudPaper>
    </MudContainer>
</div>

<style>
    .signup-page {
        min-height: calc(100vh - 150px);
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .signup-button {
        border-radius: 6px;
    }
    
    .signup-circle-1 {
        top: -30px;
        right: -20px;
        width: 180px;
        height: 180px;
        border-radius: 50%;
        background: linear-gradient(145deg, var(--mud-palette-secondary-lighten), transparent);
        opacity: 0.1;
        z-index: 0;
    }
    
    .signup-circle-2 {
        bottom: -40px;
        left: -30px;
        width: 180px;
        height: 180px;
        border-radius: 50%;
        background: linear-gradient(145deg, var(--mud-palette-primary-lighten), transparent);
        opacity: 0.1;
        z-index: 0;
    }
    
    .signup-icon-float {
        animation: float 4s ease-in-out infinite;
    }
    
    .signup-subtitle {
        color: var(--mud-palette-text-secondary);
        max-width: 350px;
        margin-left: auto;
        margin-right: auto;
    }
    
    .signup-alternate-option {
        color: var(--mud-palette-text-secondary);
    }
    
    @@keyframes float {
        0% { transform: translateY(0px); }
        50% { transform: translateY(-10px); }
        100% { transform: translateY(0px); }
    }
</style>

@code {
    private string username;
    private string email;
    private string password;
    private string confirmPassword;
    private bool showPassword;
    private bool showConfirmPassword;
    private bool isLoading;

    private async Task HandleSignUp()
    {
        if (isLoading) return;

        if (string.IsNullOrEmpty(username))
        {
            Snackbar.Add("Username is required.", Severity.Error);
            return;
        }

        if (string.IsNullOrEmpty(email) || !new EmailAddressAttribute().IsValid(email))
        {
            Snackbar.Add("A valid email is required.", Severity.Error);
            return;
        }

        if (string.IsNullOrEmpty(password))
        {
            Snackbar.Add("Password is required.", Severity.Error);
            return;
        }

        if (password != confirmPassword)
        {
            Snackbar.Add("Passwords do not match.", Severity.Error);
            return;
        }

        isLoading = true;

        try
        {
            var result = await SupabaseService.SignUpAsync(email, password, username);
            if (result)
            {
                Snackbar.Add("Registration successful!", Severity.Success);
                NavigationManager.NavigateTo("/signin");
            }
            else
            {
                Snackbar.Add("Registration failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("User already registered"))
            {
                Snackbar.Add("Email is already registered.", Severity.Warning);
            }
            else
            {
                Snackbar.Add("Registration failed. Please try again.", Severity.Error);
            }
        }
        finally
        {
            isLoading = false;
        }
    }
}